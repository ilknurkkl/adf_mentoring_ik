{
	"name": "dataflow_fact",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlOnlinePuchase",
						"type": "DatasetReference"
					},
					"name": "tOnlinePurchase"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlDimOnlineService",
						"type": "DatasetReference"
					},
					"name": "DimOnlineService"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlOnlineService",
						"type": "DatasetReference"
					},
					"name": "tOnlineService"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlDimMovie",
						"type": "DatasetReference"
					},
					"name": "DimMovie"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlFactOnlinePurchase",
						"type": "DatasetReference"
					},
					"name": "FactOnlinePurchase"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlFactOnlinePurchase_MonthlySnapshot",
						"type": "DatasetReference"
					},
					"name": "FactOnlinePurchaseMonthlySnapshot"
				}
			],
			"transformations": [
				{
					"name": "joinTOnlineService"
				},
				{
					"name": "JoinDimOnlineService"
				},
				{
					"name": "DateKeyy"
				},
				{
					"name": "MonthKeyy"
				},
				{
					"name": "join1"
				},
				{
					"name": "Aggregate"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Id as integer,",
				"          ServiceId as integer,",
				"          MovieId as integer,",
				"          UserId as integer,",
				"          Price as decimal(4,1),",
				"          TransactionId as string,",
				"          TransactionDate as timestamp,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp,",
				"          SrcFileName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tOnlinePurchase",
				"source(output(",
				"          ServiceKey as integer,",
				"          ServiceCode as string,",
				"          ServiceName as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimOnlineService",
				"source(output(",
				"          ServiceId as integer,",
				"          ServiceCode as string,",
				"          ServiceName as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tOnlineService",
				"source(output(",
				"          MovieKey as integer,",
				"          MovieIdNK as integer,",
				"          Title as string,",
				"          ReleaseDate as date,",
				"          Runtime as integer,",
				"          MovieStatus as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimMovie",
				"DateKeyy, JoinDimOnlineService join(tOnlinePurchase@ServiceId == tOnlineService@ServiceId,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> joinTOnlineService",
				"tOnlineService, DimOnlineService join(tOnlineService@ServiceCode == tOnlineService@ServiceCode,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> JoinDimOnlineService",
				"tOnlinePurchase derive(DateKey = toInteger(toString(TransactionDate,'YYYMMDD'))) ~> DateKeyy",
				"tOnlinePurchase derive(MonthKey = toInteger(toString(TransactionDate,'YYYMM'))) ~> MonthKeyy",
				"MonthKeyy, JoinDimOnlineService join(tOnlinePurchase@ServiceId == tOnlineService@ServiceId,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 aggregate(groupBy(MonthKey,",
				"          ServiceKey),",
				"     PurchaseAmount = sum(Price),",
				"          PurchaseQuantity = count(TransactionId)) ~> Aggregate",
				"joinTOnlineService sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 0,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          DateKey,",
				"          OnlineServiceKey = ServiceKey,",
				"          MovieKey = MovieId,",
				"          Price,",
				"          TransactionId",
				"     )) ~> FactOnlinePurchase",
				"Aggregate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          MonthKey as integer,",
				"          OnlineServiceKey as integer,",
				"          PurchaseAmount as decimal(10,1),",
				"          PurchaseQuantity as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          MonthKey,",
				"          OnlineServiceKey = ServiceKey,",
				"          PurchaseAmount,",
				"          PurchaseQuantity",
				"     )) ~> FactOnlinePurchaseMonthlySnapshot"
			]
		}
	}
}