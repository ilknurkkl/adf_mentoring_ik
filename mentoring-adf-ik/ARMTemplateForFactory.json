{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mentoring-adf-ik"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureBlobOnlineLs_properties_typeProperties_sasUri_secretName": {
			"type": "string",
			"defaultValue": "blob-online-cs"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://azurementoringdatalakeik.dfs.core.windows.net/"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://mentoring-key-vault-ik.vault.azure.net/"
		},
		"AzureSqlDatamartLs_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "datamart-cs"
		},
		"AzureSqlDbLs_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "azuresql-cs"
		},
		"CinemaTicketsLs_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "cinematickets-cs"
		},
		"azurementoringstorageik_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'azurementoringstorageik'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/copyToAzureSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILENAME"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table stg.online_purchase",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['serviceName']"
										},
										"sink": {
											"name": "online_service_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['serviceCode']"
										},
										"sink": {
											"name": "online_service_code",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['movieId']"
										},
										"sink": {
											"name": "movie_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"name": "user_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['price']"
										},
										"sink": {
											"name": "price",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['id']"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['datetime']"
										},
										"sink": {
											"name": "transaction_date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['pipelineId']"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['source_filename']"
										},
										"sink": {
											"name": "source_filename",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DsBlobOnline",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlStgOnlinePurchase",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateOnlineService]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDbLs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Stored procedure2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateOnlinePurchase]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDbLs",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-06T18:19:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DsBlobOnline')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlStgOnlinePurchase')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDbLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/deletefiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DeleteBlobOnline",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DsBlobOnline",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"wildcardFileName": "*",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "DeleteDatalakeOnline",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteBlobOnline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DsDataLakeOnline",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-02T21:59:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DsBlobOnline')]",
				"[concat(variables('factoryId'), '/datasets/DsDataLakeOnline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/module10')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fail1",
						"type": "Fail",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"message": "fail message",
							"errorCode": "2000"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T11:42:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/module12')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/module5')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get List of Files",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DSBlob",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get List of Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get List of Files').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "movies//"
										},
										{
											"name": "Destination",
											"value": "stg.@{if(startswith(item().name,'ratings_part'),'ratings',\nreplace(item().name,'.csv',''))}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "pipelineId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "source_filename",
													"value": "$$FILENAME"
												}
											],
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DSBlob",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlDs",
											"type": "DatasetReference",
											"parameters": {
												"tablename": {
													"value": "@{if(startswith(item().name,'ratings_part'),'ratings',replace(item().name,'.csv',''))}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "archivefile",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "module5_archive",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filename": {
												"value": "@item().name",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCast]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDbLs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Stored procedure1_copy1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesCastMap]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDbLs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "tCompany",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Stored procedure1_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCompany]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDbLs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "spPopulateMovieStatus",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "tCompany",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovieStatus]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDbLs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "tGenre",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "spPopulateMovieStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateGenre]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDbLs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "tMovies",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "tGenre",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovies]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDbLs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "tMoviesCompanyMap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "tMovies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesCompanyMap]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDbLs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "tMoviesGenreMap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "tMoviesCompanyMap",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesGenreMap]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDbLs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "tRatings",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "tMoviesGenreMap",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulatetRatings]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDbLs",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-21T01:09:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSBlob')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDbLs')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDs')]",
				"[concat(variables('factoryId'), '/pipelines/module5_archive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/module5_archive')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@pipeline().parameters.filename",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DSBlob",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DsArchive",
								"type": "DatasetReference",
								"parameters": {
									"outputfilename": {
										"value": "@pipeline().parameters.filename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-21T01:09:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSBlob')]",
				"[concat(variables('factoryId'), '/datasets/DsArchive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/module5_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipeline1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "module5",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-20T23:21:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline1')]",
				"[concat(variables('factoryId'), '/pipelines/module5')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/module6')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupNewWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupOldWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select * from dbo.Tickets where [TransactionDt] > '@{activity('LookupOldWatermark').output.firstRow.WatermarkValue}' and [TransactionDt] <= '@{activity('LookupNewWatermark').output.firstRow.NewWatermarkvalue}'\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "truncate table stg.cinema_tickets",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CinemaCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CinemaName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MovieId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "movie_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketCount",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ticket_count",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketPrice",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										},
										"sink": {
											"name": "ticket_price",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										}
									},
									{
										"source": {
											"name": "TransactionId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TransactionDt",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "transaction_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DsTickets",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlDs",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "cinema_tickets"
								}
							}
						]
					},
					{
						"name": "LookupNewWatermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select MAX(transactiondt) as NewWatermarkvalue from dbo.Tickets\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DsTickets",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupOldWatermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "StoredProceduretoWriteWatermarkActivity",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@{activity('LookupNewWatermark').output.firstRow.NewWatermarkvalue}\n",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@{activity('LookupOldWatermark').output.firstRow.TableName}\n",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CinemaTicketsLs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "StoredProceduretoWriteWatermarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCinema]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDbLs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Stored procedure2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCinemaTickets]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDbLs",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-27T02:24:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DsTickets')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDs')]",
				"[concat(variables('factoryId'), '/datasets/WatermarkDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/CinemaTicketsLs')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDbLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/module7')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_r04",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupOldWatermarkValue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "online//"
							},
							{
								"name": "Destination",
								"value": "raw/online/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@activity('LookupOldWatermarkValue').output.firstRow.WatermarkValue",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"wildcardFileName": "*",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false,
							"parallelCopies": 32,
							"enableSkipIncompatibleRow": false,
							"skipErrorFile": {
								"fileMissing": true
							},
							"validateDataConsistency": false,
							"dataIntegrationUnits": 2
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_r04",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_r04",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "LookupOldWatermarkValue",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select max(WatermarkValue) WatermarkValue from watermarktable where tablename='module7'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDs",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "watermarktable"
								}
							}
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_r04",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": "module7",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDbLs",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-02T16:15:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_r04')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_r04')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDs')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDbLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/module7_archive')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "*",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DsBlobOnline",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Json1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-02T21:59:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DsBlobOnline')]",
				"[concat(variables('factoryId'), '/datasets/Json1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/module7_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "module7",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "module7_archive",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "copyToAzureSQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-02T21:59:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/module7')]",
				"[concat(variables('factoryId'), '/pipelines/module7_archive')]",
				"[concat(variables('factoryId'), '/pipelines/copyToAzureSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/module8')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Movies": {},
									"MovieStatus": {},
									"OnlineService": {},
									"StaginDimOnlineService": {},
									"DimMovies": {},
									"DimOnlineService": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-07T11:48:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/module8_fact')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_fact",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tOnlinePurchase": {},
									"DimOnlineService": {},
									"tOnlineService": {},
									"DimMovie": {},
									"FactOnlinePurchase": {},
									"FactOnlinePurchaseMonthlySnapshot": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-07T11:48:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_fact')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/module9')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSumOfObjectsToCopy",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Start Log",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM @{pipeline().parameters.MainControlTableName} ",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "MetadataDrivenCopyTask_fzx_ControlDS",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetSumOfObjectsToCopy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetSumOfObjectsToCopy').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Script1",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDbLs",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "truncate table f  @{item().schemaname}.@{item().tablename}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "ExecuteMiddle",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Script1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pipeline9_mid",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"tablename": {
												"value": "@{item().tablename}",
												"type": "Expression"
											},
											"cw_columnDelimiter": {
												"value": "@{item().columnDelimiter}",
												"type": "Expression"
											},
											"cw_escapeChar": {
												"value": "@{item().escapeChar}",
												"type": "Expression"
											},
											"cw_quoteChar": {
												"value": "@item().quoteChar",
												"type": "Expression"
											},
											"cw_firstRowAsHeader": {
												"value": "@item().firstRowAsHeader",
												"type": "Expression"
											},
											"cw_fileName": {
												"value": "@item().fileName",
												"type": "Expression"
											},
											"cw_folderPath": {
												"value": "@item().folderPath",
												"type": "Expression"
											},
											"cw_fileSystem": {
												"value": "@item().fileSystem",
												"type": "Expression"
											},
											"mapping": {
												"value": "@item().mapping",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Execute Log",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "module9_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pipelineId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"activityName": "'PipelineCompleted'",
								"billingDuration": "0",
								"meterType": "0",
								"starttime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"endtime": {
									"value": "@utcnow()",
									"type": "Expression"
								},
								"statistics": {
									"value": "@activity('GetSumOfObjectsToCopy').output",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Start Log",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "module9_log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pipelineId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"pipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"activityName": "'PipelineStarted'",
								"billingDuration": "0",
								"meterType": "0",
								"starttime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"endtime": "11"
							}
						}
					},
					{
						"name": "Error",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Start Log",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[etl].[sp_error]",
							"storedProcedureParameters": {
								"activityName": {
									"value": {
										"value": "@activity('Start Log').output.name",
										"type": "Expression"
									},
									"type": "String"
								},
								"datetime": {
									"value": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"errorCode": {
									"value": {
										"value": "@string(activity('Start Log').error.errorcode)",
										"type": "Expression"
									},
									"type": "String"
								},
								"errorMessage": {
									"value": {
										"value": "@string(activity('Start Log').error.message)",
										"type": "Expression"
									},
									"type": "String"
								},
								"failureType": {
									"value": {
										"value": "@string(activity('Start Log').error.failureType)",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDbLs",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "int",
						"defaultValue": 5000
					},
					"MaxNumberOfConcurrentTasks": {
						"type": "int",
						"defaultValue": 20
					},
					"MainControlTableName": {
						"type": "string",
						"defaultValue": "etl.tControlMetadata"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-21T13:15:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_fzx_ControlDS')]",
				"[concat(variables('factoryId'), '/pipelines/module9_log')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDbLs')]",
				"[concat(variables('factoryId'), '/pipelines/pipeline9_mid')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/module9_log')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[etl].[sp_log]",
							"storedProcedureParameters": {
								"activityName": {
									"value": {
										"value": "@pipeline().parameters.activityName",
										"type": "Expression"
									},
									"type": "String"
								},
								"billingDuration": {
									"value": {
										"value": "@pipeline().parameters.billingDuration",
										"type": "Expression"
									},
									"type": "String"
								},
								"endtime": {
									"value": {
										"value": "@pipeline().parameters.endtime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"metertype": {
									"value": {
										"value": "@pipeline().parameters.meterType",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineName": {
									"value": {
										"value": "@pipeline().parameters.pipelineName",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineRunID": {
									"value": {
										"value": "@pipeline().parameters.pipelineId",
										"type": "Expression"
									},
									"type": "String"
								},
								"starttime": {
									"value": {
										"value": "@pipeline().parameters.starttime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"statistics": {
									"value": {
										"value": "@pipeline().parameters.statistics",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDbLs",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pipelineId": {
						"type": "string"
					},
					"pipelineName": {
						"type": "string"
					},
					"activityName": {
						"type": "string"
					},
					"billingDuration": {
						"type": "string"
					},
					"meterType": {
						"type": "string"
					},
					"starttime": {
						"type": "string"
					},
					"endtime": {
						"type": "string"
					},
					"statistics": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-21T11:05:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDbLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DSBlob",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": null,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": "*",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "FlattenHierarchy"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "AzureDataLakeStorage1",
													"type": "LinkedServiceReference"
												},
												"path": "log"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DSBlob",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DSDataLake",
											"type": "DatasetReference",
											"parameters": {
												"outputfilename": {
													"value": "@replace(item().name,'.csv',concat('_',formatDateTime(utcnow(),'yyyyMMddHHmmSS'),'.csv'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-09T12:20:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSBlob')]",
				"[concat(variables('factoryId'), '/datasets/DSDataLake')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline9_mid')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DsMetadataDriven",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@{pipeline().parameters.tablename}*",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems",
								"itemName"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "CopyData",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "@{pipeline().parameters.cw_fileSystem}/@{pipeline().parameters.cw_folderPath}/@{item().name}"
										},
										{
											"name": "Destination",
											"value": "stg.@{pipeline().parameters.tablename}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "pipelineId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "source_filename",
													"value": "$$FILEPATH"
												}
											],
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"wildcardFolderPath": {
													"value": "@pipeline().parameters.cw_folderPath",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"value": "@json(string(pipeline().parameters.mapping))\n",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "MetadataDrivenCopyTask_fzx_SourceDS",
											"type": "DatasetReference",
											"parameters": {
												"cw_columnDelimiter": {
													"value": "@pipeline().parameters.cw_columnDelimiter",
													"type": "Expression"
												},
												"cw_firstRowAsHeader": {
													"value": "@pipeline().parameters.cw_firstRowAsHeader",
													"type": "Expression"
												},
												"cw_fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"cw_folderPath": {
													"value": "@pipeline().parameters.cw_folderPath",
													"type": "Expression"
												},
												"cw_fileSystem": {
													"value": "@pipeline().parameters.cw_fileSystem",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "MetadataDrivenCopyTask_fzx_DestinationDS",
											"type": "DatasetReference",
											"parameters": {
												"tablename": {
													"value": "@pipeline().parameters.tablename",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Log CopyActivity",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "CopyData",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "module9_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pipelineId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"pipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"activityName": "CopyAcyivityCompleted",
											"billingDuration": {
												"value": "@string(json(string(activity('CopyData').output)).billingReference.billableDuration[0].duration)",
												"type": "Expression"
											},
											"meterType": {
												"value": "@string(json(string(activity('CopyData').output)).billingReference.billableDuration[0].meterType)",
												"type": "Expression"
											},
											"starttime": {
												"value": "@string(json(string(activity('CopyData').output)).executionDetails[0].start)",
												"type": "Expression"
											},
											"endtime": {
												"value": "@utcnow()",
												"type": "Expression"
											},
											"statistics": {
												"value": "@string(activity('CopyData').output)",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Error",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyData",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[sp_error]",
										"storedProcedureParameters": {
											"activityName": {
												"value": {
													"value": "@activity('CopyData').output.name",
													"type": "Expression"
												},
												"type": "String"
											},
											"datetime": {
												"value": {
													"value": "@utcNow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"errorCode": {
												"value": {
													"value": "@string(activity('CopyData').error.errorcode)",
													"type": "Expression"
												},
												"type": "String"
											},
											"errorMessage": {
												"value": {
													"value": "@string(activity('CopyData').error.message)",
													"type": "Expression"
												},
												"type": "String"
											},
											"failureType": {
												"value": {
													"value": "@string(activity('CopyData').error.failureType)",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDbLs",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tablename": {
						"type": "string",
						"defaultValue": "credits"
					},
					"cw_columnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"cw_escapeChar": {
						"type": "string",
						"defaultValue": "\""
					},
					"cw_quoteChar": {
						"type": "string",
						"defaultValue": "\\"
					},
					"cw_firstRowAsHeader": {
						"type": "bool",
						"defaultValue": true
					},
					"cw_fileName": {
						"type": "string",
						"defaultValue": "credits.csv"
					},
					"cw_folderPath": {
						"type": "string",
						"defaultValue": "metadata-driven"
					},
					"cw_fileSystem": {
						"type": "string",
						"defaultValue": "raw"
					},
					"mapping": {
						"type": "string",
						"defaultValue": {
							"type": "TabularTranslator",
							"mappings": [
								{
									"source": {
										"type": "String",
										"name": "cast"
									},
									"sink": {
										"name": "cast",
										"type": "String",
										"physicalType": "nvarchar"
									}
								},
								{
									"source": {
										"type": "String",
										"name": "crew"
									},
									"sink": {
										"name": "crew",
										"type": "String",
										"physicalType": "nvarchar"
									}
								},
								{
									"source": {
										"type": "String",
										"name": "id"
									},
									"sink": {
										"name": "id",
										"type": "String",
										"physicalType": "nvarchar"
									}
								},
								{
									"source": {
										"name": "pipelineId",
										"type": "String"
									},
									"sink": {
										"name": "pipelineId",
										"type": "String",
										"physicalType": "nvarchar"
									}
								},
								{
									"source": {
										"name": "source_filename",
										"type": "String"
									},
									"sink": {
										"name": "source_filename",
										"type": "String",
										"physicalType": "nvarchar"
									}
								}
							],
							"typeConversion": true,
							"typeConversionSettings": {
								"allowDataTruncation": true,
								"treatBooleanAsNumber": false
							}
						}
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-21T13:15:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DsMetadataDriven')]",
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_fzx_SourceDS')]",
				"[concat(variables('factoryId'), '/datasets/MetadataDrivenCopyTask_fzx_DestinationDS')]",
				"[concat(variables('factoryId'), '/pipelines/module9_log')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDbLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDimMovie')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatamartLs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieIdNK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "ReleaseDate",
						"type": "date"
					},
					{
						"name": "Runtime",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatus",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimMovie"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatamartLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDimOnlineService')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatamartLs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieIdNK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "ReleaseDate",
						"type": "date"
					},
					{
						"name": "Runtime",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatus",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimOnlineService"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatamartLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDbLs",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDbLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlFactOnlinePurchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatamartLs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactOnlinePurchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatamartLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlFactOnlinePurchase_MonthlySnapshot')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatamartLs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MonthKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OnlineServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PurchaseAmount",
						"type": "decimal",
						"precision": 10,
						"scale": 1
					},
					{
						"name": "PurchaseQuantity",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactOnlinePurchase_MonthlySnapshot"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatamartLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlMovieStatus')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDbLs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieIdNK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Budget",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HomepagePath",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "OriginalTitle",
						"type": "nvarchar"
					},
					{
						"name": "ReleaseDate",
						"type": "date"
					},
					{
						"name": "Revenue",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Runtime",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AvgVote",
						"type": "decimal",
						"precision": 3,
						"scale": 1
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SrcFileName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tMovieStatus"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDbLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlMovies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDbLs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tMovies"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDbLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlOnlinePuchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDbLs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tOnlinePurchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDbLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlOnlineService')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDbLs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ServiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceCode",
						"type": "nvarchar"
					},
					{
						"name": "ServiceName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tOnlineService"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDbLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlStgOnlinePurchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDbLs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "online_service_name",
						"type": "nvarchar"
					},
					{
						"name": "online_service_code",
						"type": "nvarchar"
					},
					{
						"name": "movie_id",
						"type": "nvarchar"
					},
					{
						"name": "user_id",
						"type": "nvarchar"
					},
					{
						"name": "price",
						"type": "nvarchar"
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					},
					{
						"name": "transaction_date",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "online_purchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDbLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DSBlob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringstorageik",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "movies"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringstorageik')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DSDataLake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"outputfilename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().outputfilename",
							"type": "Expression"
						},
						"folderPath": "movies",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_2vb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_r04')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DsArchive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"outputfilename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().outputfilename",
							"type": "Expression"
						},
						"folderPath": "movies/archive",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DsBlobOnline')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobOnlineLs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "online"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobOnlineLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DsDataLakeOnline')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online",
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DsMetadataDriven')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "metadata-driven",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cast",
						"type": "String"
					},
					{
						"name": "crew",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DsTickets')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CinemaTicketsLs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Tickets"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CinemaTicketsLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetFIlesMetadrivenDs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "metadata-driven",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cast",
						"type": "String"
					},
					{
						"name": "crew",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online/archive",
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_fzx_ControlDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDbLs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_fzx_20240220"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "etl",
					"table": "tControlMetadata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDbLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_fzx_DestinationDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDbLs",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_fzx_20240220"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "adult",
						"type": "nvarchar"
					},
					{
						"name": "belongs_to_collection",
						"type": "nvarchar"
					},
					{
						"name": "budget",
						"type": "nvarchar"
					},
					{
						"name": "genres",
						"type": "nvarchar"
					},
					{
						"name": "homepage",
						"type": "nvarchar"
					},
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "imdb_id",
						"type": "nvarchar"
					},
					{
						"name": "original_language",
						"type": "nvarchar"
					},
					{
						"name": "original_title",
						"type": "nvarchar"
					},
					{
						"name": "overview",
						"type": "nvarchar"
					},
					{
						"name": "popularity",
						"type": "nvarchar"
					},
					{
						"name": "poster_path",
						"type": "nvarchar"
					},
					{
						"name": "production_companies",
						"type": "nvarchar"
					},
					{
						"name": "production_countries",
						"type": "nvarchar"
					},
					{
						"name": "release_date",
						"type": "nvarchar"
					},
					{
						"name": "revenue",
						"type": "nvarchar"
					},
					{
						"name": "runtime",
						"type": "nvarchar"
					},
					{
						"name": "spoken_languages",
						"type": "nvarchar"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "tagline",
						"type": "nvarchar"
					},
					{
						"name": "title",
						"type": "nvarchar"
					},
					{
						"name": "video",
						"type": "nvarchar"
					},
					{
						"name": "vote_average",
						"type": "nvarchar"
					},
					{
						"name": "vote_count",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDbLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_fzx_SourceDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_columnDelimiter": {
						"type": "String"
					},
					"cw_firstRowAsHeader": {
						"type": "Bool"
					},
					"cw_fileName": {
						"type": "string"
					},
					"cw_folderPath": {
						"type": "String"
					},
					"cw_fileSystem": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_fzx_20240220"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().cw_folderPath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().cw_fileSystem",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().cw_columnDelimiter",
						"type": "Expression"
					},
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": {
						"value": "\"",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_2vb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobOnlineLs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "online"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobOnlineLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_r04')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobOnlineLs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "online"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobOnlineLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WatermarkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CinemaTicketsLs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "watermarktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CinemaTicketsLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobOnlineLs')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('AzureBlobOnlineLs_properties_typeProperties_sasUri_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatamartLs')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('AzureSqlDatamartLs_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "Azure-IR-M8",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDbLs')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('AzureSqlDbLs_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CinemaTicketsLs')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('CinemaTicketsLs_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntimeModule6",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeModule6')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azurementoringstorageik')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('azurementoringstorageik_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure-IR-M8')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "France Central",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 5,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntimeModule6')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlMovies",
								"type": "DatasetReference"
							},
							"name": "Movies"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlMovieStatus",
								"type": "DatasetReference"
							},
							"name": "MovieStatus"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlOnlineService",
								"type": "DatasetReference"
							},
							"name": "OnlineService"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlDimOnlineService",
								"type": "DatasetReference"
							},
							"name": "StaginDimOnlineService"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlDimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovies"
						},
						{
							"linkedService": {
								"referenceName": "AzureSqlDatamartLs",
								"type": "LinkedServiceReference"
							},
							"name": "DimOnlineService"
						}
					],
					"transformations": [
						{
							"name": "MovieStatusJoin"
						},
						{
							"name": "CreatedDate"
						},
						{
							"name": "ModifiedDate"
						},
						{
							"name": "ModifiedDate2"
						},
						{
							"name": "CreatedDate2"
						},
						{
							"name": "exists1"
						},
						{
							"name": "FingerPrintSource"
						},
						{
							"name": "FingerPrintSink"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Movies",
						"source(output(",
						"          MovieStatusId as integer,",
						"          MovieStatusName as string,",
						"          CreatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> MovieStatus",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> OnlineService",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StaginDimOnlineService",
						"Movies, MovieStatus join(Movies@MovieStatusId == MovieStatus@MovieStatusId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> MovieStatusJoin",
						"MovieStatusJoin derive(CreatedDate = currentDate()) ~> CreatedDate",
						"CreatedDate derive(ModifiedDate = currentDate()) ~> ModifiedDate",
						"CreatedDate2 derive(ModifiedDate = currentTimestamp()) ~> ModifiedDate2",
						"exists1 derive(CreatedDate = currentTimestamp()) ~> CreatedDate2",
						"FingerPrintSource, FingerPrintSink exists(FingerPrintSource@fp == FingerPrintSink@fp,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"OnlineService derive(fp = sha2(256,ServiceCode,ServiceName)) ~> FingerPrintSource",
						"StaginDimOnlineService derive(fp = sha2(256,ServiceCode,ServiceName)) ~> FingerPrintSink",
						"ModifiedDate2 alterRow(upsertIf(true())) ~> AlterRow1",
						"ModifiedDate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MovieIdNK,",
						"          Title,",
						"          ReleaseDate,",
						"          Runtime,",
						"          CreatedDate,",
						"          ModifiedDate,",
						"          MovieStatus = MovieStatusName",
						"     )) ~> DimMovies",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'DimOnlineService',",
						"     insertable: true,",
						"     updateable: true,",
						"     deletable: true,",
						"     upsertable: true,",
						"     keys:['ServiceCode'],",
						"     skipKeyWrites:true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CreatedDate,",
						"          ModifiedDate,",
						"          ServiceCode,",
						"          ServiceName",
						"     )) ~> DimOnlineService"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlMovies')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlMovieStatus')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDimOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDimMovie')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatamartLs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_fact')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlOnlinePuchase",
								"type": "DatasetReference"
							},
							"name": "tOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlDimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlDimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovie"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlFactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlFactOnlinePurchase_MonthlySnapshot",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchaseMonthlySnapshot"
						}
					],
					"transformations": [
						{
							"name": "joinTOnlineService"
						},
						{
							"name": "JoinDimOnlineService"
						},
						{
							"name": "DateKeyy"
						},
						{
							"name": "MonthKeyy"
						},
						{
							"name": "join1"
						},
						{
							"name": "Aggregate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlinePurchase",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimOnlineService",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineService",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimMovie",
						"DateKeyy, JoinDimOnlineService join(tOnlinePurchase@ServiceId == tOnlineService@ServiceId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> joinTOnlineService",
						"tOnlineService, DimOnlineService join(tOnlineService@ServiceCode == tOnlineService@ServiceCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinDimOnlineService",
						"tOnlinePurchase derive(DateKey = toInteger(toString(TransactionDate,'YYYMMDD'))) ~> DateKeyy",
						"tOnlinePurchase derive(MonthKey = toInteger(toString(TransactionDate,'YYYMM'))) ~> MonthKeyy",
						"MonthKeyy, JoinDimOnlineService join(tOnlinePurchase@ServiceId == tOnlineService@ServiceId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 aggregate(groupBy(MonthKey,",
						"          ServiceKey),",
						"     PurchaseAmount = sum(Price),",
						"          PurchaseQuantity = count(TransactionId)) ~> Aggregate",
						"joinTOnlineService sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          MovieKey = MovieId,",
						"          Price,",
						"          TransactionId",
						"     )) ~> FactOnlinePurchase",
						"Aggregate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MonthKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          PurchaseAmount,",
						"          PurchaseQuantity",
						"     )) ~> FactOnlinePurchaseMonthlySnapshot"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlOnlinePuchase')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDimOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDimMovie')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlFactOnlinePurchase')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlFactOnlinePurchase_MonthlySnapshot')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/credential1')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/bb9f8aa3-d551-4aef-a753-f5cda0e36f5b/resourcegroups/azure-mentoring-ik/providers/Microsoft.ManagedIdentity/userAssignedIdentities/managedID-ik"
				}
			},
			"dependsOn": []
		}
	]
}